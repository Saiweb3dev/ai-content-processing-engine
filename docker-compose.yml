version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - .:/app                    # Mount current directory to /app in container
      - /app/node_modules         # Prevent overwriting node_modules
      - ./logs:/app/logs
    container_name: ai-content-processor
    restart: unless-stopped
    ports:
      - "3000:3000"
    depends_on:
      - postgres
      - redis
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=ai_content_processing
      - DB_USER=postgres
      - DB_PASSWORD=postgres_password
      - REDIS_URL=redis://redis:6379
      - CACHE_TTL=3600
      - CACHE_ENABLED=true
      - LOG_LEVEL=info
    networks:
      - app-network

  postgres:
    image: postgres:16-alpine
    container_name: postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=ai_content_processing
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres_password
      - PGDATA=/data/postgres
    volumes:
      - postgres-data:/data/postgres
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
  